[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "qsstyles"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.7"
license = "BSD-3-Clause"
keywords = ["theme", "styles", "matplotlib"]
authors = [
  { name = "Tania Allard", email = "taniar.allard@gmail.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "License :: OSI Approved :: BSD License",
  "Topic :: Scientific/Engineering :: Visualization"
]
dependencies = ["matplotlib"]

[project.urls]
Documentation = "https://github.com/trallard/qsstyles#readme"
Issues = "https://github.com/trallard/qsstyles/issues"
Source = "https://github.com/trallard/qsstyles"

# Versioning -------------------------------------------------------------------
[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/qsstyles/_version.py"

# Testing ----------------------------------------------------------------------
[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

# Linting and formatting  ------------------------------------------------------
[tool.hatch.envs.lint]
# skips project installation
detached = true
dependencies = [
  "pre-commit",
]


[tool.black]
line-length = 79

[tool.ruff]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["qsstyles"]
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["qsstyles"]
branch = true
parallel = true
omit = [
  "src/qsstyles/_version.py",
]

[tool.coverage.paths]
qsstyles = ["src/qsstyles", "*/qsstyles/src/qsstyles"]
tests = ["tests", "*/qsstyles/tests"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
